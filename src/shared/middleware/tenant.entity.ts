import {
  Tenant,
  CreateTenantData,
  UpdateTenantData,
  TenantSettings,
  DEFAULT_TENANT_SETTINGS,
} from "@/shared/types/tenant.types";

export class TenantEntity {
  private constructor(private tenant: Tenant) {}

  // Factory method for creating a new tenant instance (before DB insert)
  static create(data: CreateTenantData): TenantEntity {
    const now = new Date();

    const tenant: Tenant = {
      id: "", // will be generated by DB
      name: data.name,
      subdomain: data.subdomain,
      settings: {
        ...DEFAULT_TENANT_SETTINGS,
        ...data.settings,
      },
      isActive: true,
      created_at: now,
      updated_at: now,
      tenant_id: "",
    };

    return new TenantEntity(tenant);
  }

  // Factory method for mapping DB result (snake_case → camelCase)
  static fromDatabase(data: any): TenantEntity {
    const tenant: Tenant = {
      id: data.id,
      tenant_id: data.id,
      name: data.name,
      subdomain: data.subdomain,
      isActive: Boolean(data.is_active),
      settings: (typeof data.settings === "string" ? JSON.parse(data.settings) : data.settings) as TenantSettings,
      created_at: new Date(data.created_at),
      updated_at: new Date(data.updated_at),
      deletedAt: data.deleted_at ? new Date(data.deleted_at) : undefined,
    };

    return new TenantEntity(tenant);
  }

  // Getters
  get id(): string {
    return this.tenant.id;
  }

  get name(): string {
    return this.tenant.name;
  }

  get subdomain(): string {
    return this.tenant.subdomain;
  }

  get isActive(): boolean {
    return this.tenant.isActive;
  }

  get settings(): TenantSettings {
    return this.tenant.settings;
  }

  get deletedAt(): Date | undefined {
    return this.tenant.deletedAt;
  }

  get createdAt(): Date {
    return this.tenant.created_at;
  }

  get updatedAt(): Date {
    return this.tenant.updated_at;
  }

  // Business logic
  activate(): void {
    this.tenant.isActive = true;
    this.tenant.updated_at = new Date();
  }

  deactivate(): void {
    this.tenant.isActive = false;
    this.tenant.updated_at = new Date();
  }

  update(data: UpdateTenantData): void {
    if (data.name !== undefined) this.tenant.name = data.name;
    if (data.subdomain !== undefined) this.tenant.subdomain = data.subdomain;
    if (data.isActive !== undefined) this.tenant.isActive = data.isActive;
    if (data.settings) {
      this.tenant.settings = {
        ...this.tenant.settings,
        ...data.settings,
      };
    }

    this.tenant.updated_at = new Date();
  }

  hasFeature(feature: string): boolean {
    return this.tenant.settings.features.includes(feature as any);
  }

  // Serialize for sending to API response (remove sensitive internals if needed)
  toJSON(): Tenant {
    return { ...this.tenant };
  }

  // Serialize to DB format (camelCase → snake_case)
  toDatabaseFormat(): any {
    return {
      id: this.tenant.id,
      name: this.tenant.name,
      subdomain: this.tenant.subdomain,
      is_active: this.tenant.isActive,
      settings: JSON.stringify(this.tenant.settings),
      created_at: this.tenant.created_at,
      updated_at: this.tenant.updated_at,
      deleted_at: this.tenant.deletedAt || null,
    };
  }

  getRawData(): Tenant {
    return { ...this.tenant };
  }
}
