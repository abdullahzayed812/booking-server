import { BaseEntity } from "@/shared/types/common.types";

export interface Patient extends BaseEntity {
  userId: string; // References users.id
  medicalRecordNumber?: string | undefined;
  emergencyContactName?: string | undefined;
  emergencyContactPhone?: string | undefined;
  bloodType?: string | undefined;
  allergies?: string | undefined;
  medicalHistory?: string | undefined;
}

export interface PatientWithUser extends Patient {
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  dateOfBirth?: Date;
  isActive: boolean;
  isVerified: boolean;
}

export interface CreatePatientData {
  tenantId: string;
  userId: string;
  medicalRecordNumber?: string | undefined;
  emergencyContactName?: string | undefined;
  emergencyContactPhone?: string | undefined;
  bloodType?: string | undefined;
  allergies?: string | undefined;
  medicalHistory?: string | undefined;
}

export interface UpdatePatientData {
  medicalRecordNumber?: string;
  emergencyContactName?: string;
  emergencyContactPhone?: string;
  bloodType?: string;
  allergies?: string;
  medicalHistory?: string;
}

// Domain methods for Patient entity
export class PatientEntity {
  private constructor(private patient: Patient) {}

  static create(data: CreatePatientData): PatientEntity {
    const patient: Patient = {
      id: "", // Will be generated by database
      tenant_id: data.tenantId,
      userId: data.userId,
      medicalRecordNumber: data.medicalRecordNumber,
      emergencyContactName: data.emergencyContactName,
      emergencyContactPhone: data.emergencyContactPhone,
      bloodType: data.bloodType,
      allergies: data.allergies,
      medicalHistory: data.medicalHistory,
      created_at: new Date(),
      updated_at: new Date(),
    };

    return new PatientEntity(patient);
  }

  static fromDatabase(data: any): PatientEntity {
    const patient: Patient = {
      id: data.id,
      tenant_id: data.tenant_id,
      userId: data.user_id || data.id,
      medicalRecordNumber: data.medical_record_number,
      emergencyContactName: data.emergency_contact_name,
      emergencyContactPhone: data.emergency_contact_phone,
      bloodType: data.blood_type,
      allergies: data.allergies,
      medicalHistory: data.medical_history,
      created_at: new Date(data.created_at),
      updated_at: new Date(data.updated_at),
    };

    return new PatientEntity(patient);
  }

  // Getters
  get id(): string {
    return this.patient.id;
  }

  get tenantId(): string {
    return this.patient.tenant_id;
  }

  get userId(): string {
    return this.patient.userId;
  }

  get medicalRecordNumber(): string | undefined {
    return this.patient.medicalRecordNumber;
  }

  get hasEmergencyContact(): boolean {
    return !!(this.patient.emergencyContactName && this.patient.emergencyContactPhone);
  }

  get hasAllergies(): boolean {
    return !!(this.patient.allergies && this.patient.allergies.trim().length > 0);
  }

  get hasMedicalHistory(): boolean {
    return !!(this.patient.medicalHistory && this.patient.medicalHistory.trim().length > 0);
  }

  // Business logic methods
  updateMedicalInfo(data: UpdatePatientData): void {
    Object.assign(this.patient, {
      ...data,
      updated_at: new Date(),
    });
  }

  setEmergencyContact(name: string, phone: string): void {
    this.patient.emergencyContactName = name;
    this.patient.emergencyContactPhone = phone;
    this.patient.updated_at = new Date();
  }

  updateAllergies(allergies: string): void {
    this.patient.allergies = allergies;
    this.patient.updated_at = new Date();
  }

  updateMedicalHistory(history: string): void {
    this.patient.medicalHistory = history;
    this.patient.updated_at = new Date();
  }

  // Convert to plain object for API responses
  toJSON(): Patient {
    return { ...this.patient };
  }

  // Convert to database format
  toDatabaseFormat(): any {
    return {
      id: this.patient.id,
      tenant_id: this.patient.tenant_id,
      user_id: this.patient.userId,
      medical_record_number: this.patient.medicalRecordNumber,
      emergency_contact_name: this.patient.emergencyContactName,
      emergency_contact_phone: this.patient.emergencyContactPhone,
      blood_type: this.patient.bloodType,
      allergies: this.patient.allergies,
      medical_history: this.patient.medicalHistory,
      created_at: this.patient.created_at,
      updated_at: this.patient.updated_at,
    };
  }

  getRawData(): Patient {
    return { ...this.patient };
  }
}
