import { BaseEntity } from "@/shared/types/common.types";

export interface MedicalNote extends BaseEntity {
  appointmentId: string;
  doctorId: string;
  patientId: string;
  chiefComplaint?: string | undefined;
  diagnosis?: string | undefined;
  treatmentPlan?: string | undefined;
  medications?: string | undefined;
  followUpInstructions?: string | undefined;
  nextAppointmentRecommended: boolean;
  isConfidential: boolean;
}

export interface MedicalNoteWithDetails extends MedicalNote {
  doctorName: string;
  patientName: string;
  appointmentDate: Date;
  appointmentTime: string;
}

export interface CreateMedicalNoteData {
  tenantId: string;
  appointmentId: string;
  doctorId: string;
  patientId: string;
  chiefComplaint?: string | undefined;
  diagnosis?: string | undefined;
  treatmentPlan?: string | undefined;
  medications?: string | undefined;
  followUpInstructions?: string | undefined;
  nextAppointmentRecommended?: boolean | undefined;
  isConfidential?: boolean | undefined;
}

export interface UpdateMedicalNoteData {
  chiefComplaint?: string;
  diagnosis?: string;
  treatmentPlan?: string;
  medications?: string;
  followUpInstructions?: string;
  nextAppointmentRecommended?: boolean;
  isConfidential?: boolean;
}

// Domain methods for MedicalNote entity
export class MedicalNoteEntity {
  private constructor(private note: MedicalNote) {}

  static create(data: CreateMedicalNoteData): MedicalNoteEntity {
    const note: MedicalNote = {
      id: "", // Will be generated by database
      tenant_id: data.tenantId,
      appointmentId: data.appointmentId,
      doctorId: data.doctorId,
      patientId: data.patientId,
      chiefComplaint: data.chiefComplaint,
      diagnosis: data.diagnosis,
      treatmentPlan: data.treatmentPlan,
      medications: data.medications,
      followUpInstructions: data.followUpInstructions,
      nextAppointmentRecommended: data.nextAppointmentRecommended || false,
      isConfidential: data.isConfidential || false,
      created_at: new Date(),
      updated_at: new Date(),
    };

    return new MedicalNoteEntity(note);
  }

  static fromDatabase(data: any): MedicalNoteEntity {
    const note: MedicalNote = {
      id: data.id,
      tenant_id: data.tenant_id,
      appointmentId: data.appointment_id,
      doctorId: data.doctor_id,
      patientId: data.patient_id,
      chiefComplaint: data.chief_complaint,
      diagnosis: data.diagnosis,
      treatmentPlan: data.treatment_plan,
      medications: data.medications,
      followUpInstructions: data.follow_up_instructions,
      nextAppointmentRecommended: Boolean(data.next_appointment_recommended),
      isConfidential: Boolean(data.is_confidential),
      created_at: new Date(data.created_at),
      updated_at: new Date(data.updated_at),
    };

    return new MedicalNoteEntity(note);
  }

  // Getters
  get id(): string {
    return this.note.id;
  }

  get tenantId(): string {
    return this.note.tenant_id;
  }

  get appointmentId(): string {
    return this.note.appointmentId;
  }

  get doctorId(): string {
    return this.note.doctorId;
  }

  get patientId(): string {
    return this.note.patientId;
  }

  get isConfidential(): boolean {
    return this.note.isConfidential;
  }

  get hasFollowUpRecommendation(): boolean {
    return this.note.nextAppointmentRecommended;
  }

  get hasCompleteInformation(): boolean {
    return !!(this.note.chiefComplaint && this.note.diagnosis && this.note.treatmentPlan);
  }

  // Business logic methods
  markAsConfidential(): void {
    this.note.isConfidential = true;
    this.note.updated_at = new Date();
  }

  markAsNonConfidential(): void {
    this.note.isConfidential = false;
    this.note.updated_at = new Date();
  }

  recommendFollowUp(): void {
    this.note.nextAppointmentRecommended = true;
    this.note.updated_at = new Date();
  }

  updateContent(data: UpdateMedicalNoteData): void {
    Object.assign(this.note, {
      ...data,
      updated_at: new Date(),
    });
  }

  addDiagnosis(diagnosis: string): void {
    this.note.diagnosis = diagnosis;
    this.note.updated_at = new Date();
  }

  addTreatmentPlan(treatmentPlan: string): void {
    this.note.treatmentPlan = treatmentPlan;
    this.note.updated_at = new Date();
  }

  addMedications(medications: string): void {
    this.note.medications = medications;
    this.note.updated_at = new Date();
  }

  addFollowUpInstructions(instructions: string): void {
    this.note.followUpInstructions = instructions;
    this.note.updated_at = new Date();
  }

  // Validation methods
  canBeViewedBy(userId: string, userRole: string): boolean {
    // Admins can view all notes
    if (userRole === "admin") {
      return true;
    }

    // The creating doctor can always view
    if (this.note.doctorId === userId) {
      return true;
    }

    // The patient can view their own notes (unless confidential)
    if (this.note.patientId === userId && !this.note.isConfidential) {
      return true;
    }

    return false;
  }

  canBeEditedBy(userId: string, userRole: string): boolean {
    // Only admins and the creating doctor can edit
    return userRole === "admin" || this.note.doctorId === userId;
  }

  // Convert to plain object for API responses
  toJSON(): MedicalNote {
    return { ...this.note };
  }

  // Convert to database format
  toDatabaseFormat(): any {
    return {
      id: this.note.id,
      tenant_id: this.note.tenant_id,
      appointment_id: this.note.appointmentId,
      doctor_id: this.note.doctorId,
      patient_id: this.note.patientId,
      chief_complaint: this.note.chiefComplaint,
      diagnosis: this.note.diagnosis,
      treatment_plan: this.note.treatmentPlan,
      medications: this.note.medications,
      follow_up_instructions: this.note.followUpInstructions,
      next_appointment_recommended: this.note.nextAppointmentRecommended,
      is_confidential: this.note.isConfidential,
      created_at: this.note.created_at,
      updated_at: this.note.updated_at,
    };
  }

  getRawData(): MedicalNote {
    return { ...this.note };
  }
}
